import os

# Project root directory name
PROJECT_NAME = "stockstreaks_mvp"

# Define the directory structure and files to create
# Tuple format: (path_parts_list, placeholder_content_or_None_for_dir_only)
# Placeholder content can be a string or a list of strings (for multi-line files)
structure = [
    # Root files
    (["README.md"], """# StockStreaks MVP
This project is a Flask application to display stock price streaks.
It includes an integrated data pipeline using dlt, SQLMesh, and DuckDB."""),
    (["requirements.txt"], """Flask
Gunicorn
dlt
sqlmesh[duckdb] # or sqlmesh with specific duckdb version
# Add other dependencies as needed e.g., requests, pandas
"""),
    (["Dockerfile"], """# Dockerfile for StockStreaks MVP
FROM python:3.9-slim-buster

WORKDIR /app

# Environment setup (if needed, e.g., for non-interactive installs)
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1

# Install OS-level dependencies if any
# RUN apt-get update && apt-get install -y ... && rm -rf /var/lib/apt/lists/*

COPY requirements.txt requirements.txt
RUN pip install --no-cache-dir -r requirements.txt

COPY . .

# Ensure data directory exists and is writable if needed by pipeline at runtime
# RUN mkdir -p /app/data && chown -R <someuser>:<somegroup> /app/data
# For release_command, this might not be strictly necessary if pipeline creates it.

EXPOSE 8080

# The pipeline will be run via the release_command in fly.toml
CMD ["gunicorn", "--bind", ":8080", "--workers", "4", "app:app"]
"""),
    ([".dockerignore"], """__pycache__/
*.pyc
*.pyo
*.pyd
.Python
env/
venv/
.git/
.github/
*.db
*.duckdb
# Local dlt state
.dlt/
# SQLMesh state
.sqlmesh/
# Test files or local data not to be included in image
local_test_data/
*.log
# IDE specific
.vscode/
.idea/
"""),
    (["fly.toml"], """# fly.toml placeholder for StockStreaks MVP
# This file will be largely generated by 'flyctl launch'.
# You'll primarily need to add the [deploy].release_command.

app = "stockstreaks-mvp" # Replace with your app name on Fly.io
primary_region = "iad"   # Replace with your chosen primary region

[build]
  # Dockerfile is usually detected automatically

[deploy]
  release_command = "python pipeline/run_pipeline.py"

[http_service]
  internal_port = 8080
  force_https = true
  auto_stop_machines = true
  auto_start_machines = true
  min_machines_running = 0 # Set to 1 for faster wake-ups if needed

[[vm]]
  cpu_kind = "shared"
  cpus = 1
  memory_mb = 512 # Start with 512MB due to pipeline, adjust as needed
"""),
    (["app.py"], """# app.py - Main Flask Application for StockStreaks MVP
from flask import Flask, render_template, jsonify, abort
import os
import json

app = Flask(__name__)

DATA_DIR = os.path.join(os.path.dirname(__file__), 'data')
TICKERS_DIR = os.path.join(DATA_DIR, 'tickers')

def load_json_data(filename):
    \"\"\"Helper to load JSON data from the data directory.\"\"\"
    try:
        with open(os.path.join(DATA_DIR, filename), 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        return None # Or raise error

def load_ticker_data(symbol):
    \"\"\"Helper to load JSON data for a specific ticker.\"\"\"
    try:
        with open(os.path.join(TICKERS_DIR, f"{symbol.upper()}.json"), 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        return None

@app.route('/')
def home():
    market_indices = load_json_data('market_indices.json')
    notable_streaks = load_json_data('notable_streaks.json')
    if market_indices is None or notable_streaks is None:
        # Fallback or error if essential data is missing
        market_indices = []
        notable_streaks = []
    return render_template('home.html', market_indices=market_indices, notable_streaks=notable_streaks)

@app.route('/ticker/<symbol>')
def ticker_detail(symbol):
    ticker_data = load_ticker_data(symbol)
    if ticker_data is None:
        return render_template('not_found.html', symbol=symbol), 404
    return render_template('ticker_detail.html', ticker=ticker_data, symbol=symbol.upper())

# Example: A simple "Learn" page route
@app.route('/learn')
def learn():
    return render_template('learn.html') # You'll need to create learn.html

# Example: Placeholder for "Discover Streaks" page
@app.route('/discover')
def discover():
    # For MVP, this might be a simple static page or redirect to home
    return render_template('discover_streaks.html') # You'll need to create discover_streaks.html

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=int(os.environ.get('PORT', 8080)))
"""),

    # Pipeline directory
    (["pipeline"], None),
    (["pipeline", "run_pipeline.py"], """# pipeline/run_pipeline.py
# Main script to orchestrate the data pipeline.
# This script will be executed by the release_command in fly.toml.

import os
import json
import duckdb
# import dlt # Assuming dlt is used
# from sqlmesh.core.context import Context # Assuming SQLMesh is used

DATA_OUTPUT_DIR = os.path.join(os.path.dirname(__file__), '..', 'data')
TICKERS_OUTPUT_DIR = os.path.join(DATA_OUTPUT_DIR, 'tickers')

def ensure_dir_exists(path):
    if not os.path.exists(path):
        os.makedirs(path)
    print(f"Directory ensured: {path}")

def run_dlt_pipeline():
    print("Simulating: Running dlt pipeline to ingest data into DuckDB...")
    # Placeholder for dlt pipeline execution
    # Example:
    # pipeline = dlt.pipeline(pipeline_name='stock_data',
    #                         destination='duckdb',
    #                         dataset_name='raw_stock_data')
    # source_data = your_dlt_source_function() # e.g., from dlt_sources.stock_source
    # load_info = pipeline.run(source_data)
    # print(load_info)
    print("Simulating: dlt pipeline finished.")

def run_sqlmesh_transformations():
    print("Simulating: Running SQLMesh transformations...")
    # Placeholder for SQLMesh execution
    # Example:
    # config_path = os.path.join(os.path.dirname(__file__), 'sqlmesh_project')
    # context = Context(paths=[config_path], config='local_duckdb') # Ensure config name matches
    # context.plan(auto_apply=True) # Or specific environment and plan application steps
    # print("SQLMesh plan applied.")
    print("Simulating: SQLMesh transformations finished.")

def export_data_to_json():
    print("Exporting data to JSON files...")
    ensure_dir_exists(DATA_OUTPUT_DIR)
    ensure_dir_exists(TICKERS_OUTPUT_DIR)

    # Example: Connect to DuckDB (path should align with dlt/sqlmesh config)
    db_path = os.path.join(os.path.dirname(__file__), '..', 'stock_data.duckdb') # Example path
    print(f"Connecting to DuckDB at: {db_path}")
    # conn = duckdb.connect(database=db_path, read_only=True) # Or False if creating/updating

    # --- Market Indices ---
    # Replace with actual queries to your transformed tables in DuckDB
    mock_market_indices = [
        {"name": "S&P 500", "symbol": "SPY", "currentPrice": "450.78", "dailyChange": "+1.25", "dailyChangePercent": "+0.28%", "streakType": "Win", "streakDuration": 3, "recentDays": ["Win", "Win", "Win", "Loss", "Win", "Loss", "Loss", "Win", "Neutral", "Win", "Win", "Loss", "Win"]},
        {"name": "Nasdaq 100", "symbol": "QQQ", "currentPrice": "380.50", "dailyChange": "-0.50", "dailyChangePercent": "-0.13%", "streakType": "Loss", "streakDuration": 1, "recentDays": ["Loss", "Win", "Win", "Win", "Loss", "Win", "Loss", "Loss", "Win", "Neutral", "Win", "Win", "Loss"]},
    ]
    with open(os.path.join(DATA_OUTPUT_DIR, 'market_indices.json'), 'w') as f:
        json.dump(mock_market_indices, f, indent=2)
    print(f"Generated: {os.path.join(DATA_OUTPUT_DIR, 'market_indices.json')}")

    # --- Notable Streaks ---
    mock_notable_streaks = [
        {"symbol": "STRK1", "companyName": "Streak Inc.", "currentPrice": "150.22", "dailyChange": "+2.30", "dailyChangePercent": "+1.55%", "streakType": "Win", "streakDuration": 9, "recentDays": ["Win"]*9 + ["Loss"]*4, "streakPercentageChange": "+12.5%", "specialIndicators": ["New High"]},
        {"symbol": "FALL1", "companyName": "Falling Co.", "currentPrice": "75.10", "dailyChange": "-1.10", "dailyChangePercent": "-1.45%", "streakType": "Loss", "streakDuration": 6, "recentDays": ["Loss"]*6 + ["Win"]*7, "streakPercentageChange": "-8.2%"}
    ]
    with open(os.path.join(DATA_OUTPUT_DIR, 'notable_streaks.json'), 'w') as f:
        json.dump(mock_notable_streaks, f, indent=2)
    print(f"Generated: {os.path.join(DATA_OUTPUT_DIR, 'notable_streaks.json')}")

    # --- Individual Tickers ---
    # This would typically loop through a list of tickers from your DB
    mock_tickers_data = {
        "AAPL": {"symbol": "AAPL", "companyName": "Apple Inc.", "currentPrice": "170.34", "dailyChange": "+1.00", "dailyChangePercent": "+0.59%", "lastUpdated": "4:00 PM May 27, 2025", "currentStreak": {"type": "Win", "duration": 2, "priceChange": "+2.50", "percentChange": "+1.48%"}, "longestWinStreak": {"duration": 8, "dateRange": "Mar 10 - Mar 19"}, "longestLossStreak": {"duration": 5, "dateRange": "Apr 01 - Apr 05"}, "volatility30Day": "1.8%", "priceHistory30Day": [{"date": "2025-04-28", "close": 168.00}], "recentStreaks": [{"type": "Win", "duration": "2 Days", "startDate": "May 26, 2025", "endDate": "May 27, 2025", "totalChange": "+2.50 (+1.48%)"}]},
        "STRK1": {"symbol": "STRK1", "companyName": "Streak Inc.", "currentPrice": "150.22", "dailyChange": "+2.30", "dailyChangePercent": "+1.55%", "lastUpdated": "4:00 PM May 27, 2025", "currentStreak": {"type": "Win", "duration": 9, "priceChange": "+16.70", "percentChange": "+12.5%"}, "longestWinStreak": {"duration": 9, "dateRange": "May 17 - May 27"}, "longestLossStreak": {"duration": 4, "dateRange": "Apr 20 - Apr 23"}, "volatility30Day": "2.2%", "priceHistory30Day": [{"date": "2025-04-28", "close": 130.00}], "recentStreaks": [{"type": "Win", "duration": "9 Days", "startDate": "May 17, 2025", "endDate": "May 27, 2025", "totalChange": "+16.70 (+12.5%)"}]},
    }
    for symbol, data in mock_tickers_data.items():
        with open(os.path.join(TICKERS_OUTPUT_DIR, f"{symbol}.json"), 'w') as f:
            json.dump(data, f, indent=2)
        print(f"Generated: {os.path.join(TICKERS_OUTPUT_DIR, f'{symbol}.json')}")

    # conn.close() # Close DuckDB connection
    print("JSON export finished.")

def main():
    print("Starting StockStreaks data pipeline...")
    run_dlt_pipeline()
    run_sqlmesh_transformations()
    export_data_to_json()
    print("StockStreaks data pipeline finished successfully.")

if __name__ == "__main__":
    main()
"""),

    (["pipeline", "dlt_sources"], None),
    (["pipeline", "dlt_sources", "__init__.py"], "# pipeline/dlt_sources/__init__.py"),
    (["pipeline", "dlt_sources", "stock_data_source.py"], """# pipeline/dlt_sources/stock_data_source.py
# import dlt
# import requests # or your preferred HTTP client / SDK for stock data

# Placeholder: API key and base URL (manage secrets properly, e.g., via env vars)
# API_KEY = os.environ.get("STOCK_API_KEY")
# BASE_URL = "https://api.example-stock-data.com/v1/"

# @dlt.source(name="stock_api")
# def stock_api_source(tickers=["AAPL", "MSFT", "SPY", "QQQ"]):
#     \"\"\"A dlt source to fetch stock data for a list of tickers.\"\"\"
#     # for ticker in tickers:
#     #     yield dlt.resource(
#     #         fetch_historical_data(ticker),
#     #         name=f"price_data_{ticker}",
#     #         write_disposition="replace" # or "merge" with primary_key
#     #     )
#     pass # Replace with actual source implementation

# def fetch_historical_data(ticker):
#     \"\"\"Fetches historical EOD data for a given ticker.\"\"\"
#     # print(f"Fetching data for {ticker}...")
#     # headers = {"Authorization": f"Bearer {API_KEY}"}
#     # params = {"symbol": ticker, "interval": "1day", "outputsize": "full"} # example params
#     # response = requests.get(f"{BASE_URL}historical", headers=headers, params=params)
#     # response.raise_for_status() # Raise an exception for HTTP errors
#     # data = response.json().get("Time Series (Daily)", {}) # Adapt to your API response structure
#     # for date, values in data.items():
#     #     yield {
#     #         "ticker": ticker,
#     #         "date": date,
#     #         "open": float(values["1. open"]),
#     #         "high": float(values["2. high"]),
#     #         "low": float(values["3. low"]),
#     #         "close": float(values["4. close"]),
#     #         "volume": int(values["5. volume"])
#     #     }
#     # Mock data for placeholder
#     if ticker == "AAPL":
#         yield {"ticker": "AAPL", "date": "2025-05-27", "open": 170.00, "high": 171.00, "low": 169.00, "close": 170.34, "volume": 50000000}
#         yield {"ticker": "AAPL", "date": "2025-05-26", "open": 169.00, "high": 169.50, "low": 168.00, "close": 169.34, "volume": 45000000}
#     elif ticker == "SPY":
#         yield {"ticker": "SPY", "date": "2025-05-27", "open": 450.00, "high": 451.00, "low": 449.00, "close": 450.78, "volume": 70000000}
#     print(f"Simulating: Fetched data for {ticker}")


# if __name__ == "__main__":
#     # Example of how to run the source directly (for testing)
#     # pipeline = dlt.pipeline(
#     #     pipeline_name="test_stock_source",
#     #     destination="duckdb",
#     #     dataset_name="test_data"
#     # )
#     # src = stock_api_source(tickers=["AAPL"])
#     # info = pipeline.run(src)
#     # print(info)
pass
"""),

    (["pipeline", "sqlmesh_project"], None),
    (["pipeline", "sqlmesh_project", "config.py"], """# pipeline/sqlmesh_project/config.py
from sqlmesh.core.config import Config, DuckDBConnectionConfig # Example for DuckDB

# Define the SQLMesh config for your project
# This example uses a local DuckDB file.
# The path is relative to THIS config.py file.
# Ensure your dlt pipeline writes to this same DuckDB file.
DUCKDB_FILE = "../../stock_data.duckdb" # Adjust path as needed

config = Config(
    default_connection=DuckDBConnectionConfig(database=DUCKDB_FILE),
    # You can define multiple connection environments e.g., local, dev, prod
    connections={
        "local_duckdb": DuckDBConnectionConfig(database=DUCKDB_FILE)
    },
    # default_test_connection=DuckDBConnectionConfig(database=":memory:"), # For unit tests
    # model_defaults=...,
    # ... other SQLMesh configurations
    # Specify that models are in the 'models' subdirectory
    model_loader_kwargs={"path": "models"}
)
"""),
    (["pipeline", "sqlmesh_project", "models"], None),
    (["pipeline", "sqlmesh_project", "models", "example_model.sql"], """-- pipeline/sqlmesh_project/models/example_model.sql
-- This is a placeholder SQLMesh model.
-- Replace this with your actual data transformation logic.

MODEL (
  name stock_streaks.example_transformed_data, -- Example model name (schema.table_name)
  kind FULL, -- or INCREMENTAL, VIEW, etc.
  audits (assert_not_null(column=close_price)),
  description "An example model that selects and potentially transforms raw stock data."
);

-- Assuming you have a table `raw_stock_data.price_data_aapl` ingested by dlt
-- You'd typically have a staging model per source table first.
-- For this example, let's pretend there's a generic `raw_prices` table.

-- SELECT
--   ticker,
--   CAST(date AS DATE) AS price_date,
--   CAST("open" AS DOUBLE) AS open_price, -- Ensure column names are quoted if they are keywords or have spaces
--   CAST("high" AS DOUBLE) AS high_price,
--   CAST("low" AS DOUBLE) AS low_price,
--   CAST("close" AS DOUBLE) AS close_price,
--   CAST(volume AS BIGINT) AS volume
-- FROM raw_stock_data.some_raw_table -- Replace with your actual raw data table from dlt
-- WHERE ticker IS NOT NULL AND date IS NOT NULL;

-- Placeholder query:
SELECT
  'AAPL' AS ticker,
  CURRENT_DATE AS price_date,
  170.0 AS open_price,
  171.0 AS high_price,
  169.0 AS low_price,
  170.5 AS close_price,
  1000000 AS volume;
"""),

    (["pipeline", "config"], None),
    (["pipeline", "config", "pipeline_config.yml"], """# pipeline/config/pipeline_config.yml
# Placeholder for pipeline specific configurations
# For example, list of tickers to process, API endpoints (not keys!), etc.

tickers_to_track:
  - AAPL
  # - MSFT
  # - GOOGL
  # - TSLA
  # - AMZN

indices_to_track:
  - SPY # S&P 500 ETF
  - QQQ # Nasdaq 100 ETF
  # - DIA # Dow Jones ETF

# data_source_api_url: "https://your.stock.api/v1" # API URL, not keys
# api_retry_attempts: 3
"""),

    (["pipeline", "pipeline_utils"], None),
    (["pipeline", "pipeline_utils", "__init__.py"], "# pipeline/pipeline_utils/__init__.py"),


    # Data directory (output for pipeline)
    (["data"], None),
    (["data", "README.md"], """# /data Directory
This directory contains the JSON data files generated by the `pipeline/run_pipeline.py` script.
The Flask application reads from these files to display information.

- `market_indices.json`: Data for the Market Snapshot section on the Home Page.
- `notable_streaks.json`: Data for the Notable Market Streaks section on the Home Page.
- `tickers/`: Contains individual JSON files for each stock symbol (e.g., `AAPL.json`).
"""),
    (["data", "tickers"], None), # Subdirectory for individual ticker JSON files

    # Static files
    (["static"], None),
    (["static", "css"], None),
    (["static", "css", "style.css"], """/* static/css/style.css */
body {
    font-family: 'Inter', sans-serif; /* [cite: 96] */
    background-color: #111827; /* [cite: 93] */
    color: #D1D5DB; /* [cite: 94] */
    margin: 0;
    padding: 0;
    line-height: 1.6;
}

.container {
    width: 90%;
    max-width: 1200px;
    margin: auto;
    padding: 20px;
}

/* --- Global Header / Navigation --- */
.global-header {
    background-color: #1F2937; /* Card color as header bg */
    padding: 1rem 2rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-bottom: 1px solid #374151;
}

.logo a {
    color: #D1D5DB;
    text-decoration: none;
    font-size: 1.8em;
    font-weight: bold;
}

.logo .streaks-accent {
    color: #10B981; /* Emerald Green [cite: 94] */
}

.main-nav ul {
    list-style: none;
    padding: 0;
    margin: 0;
    display: flex;
}

.main-nav li {
    margin-left: 20px;
}

.main-nav a {
    color: #D1D5DB;
    text-decoration: none;
    font-size: 1em;
    padding: 0.5rem 1rem;
    border-radius: 4px;
}

.main-nav a.active,
.main-nav a:hover {
    background-color: #374151; /* Darker accent for hover/active */
    color: #FFFFFF;
}

.hamburger-menu {
    display: none; /* Hidden on larger screens */
    font-size: 1.5rem;
    color: #D1D5DB;
    cursor: pointer;
}

/* --- Global Footer --- */
.global-footer {
    text-align: center;
    padding: 2rem;
    margin-top: 2rem;
    background-color: #1F2937; /* [cite: 93] */
    color: #9CA3AF; /* Subtler text for footer */
    font-size: 0.9em;
    border-top: 1px solid #374151;
}

/* --- Cards --- */
.card {
    background-color: #1F2937; /* [cite: 93] */
    border-radius: 8px;
    padding: 1.5rem;
    margin-bottom: 1.5rem;
    box-shadow: 0 4px 6px rgba(0,0,0,0.1); /* Subtle shadow for depth */
}

.card-title {
    font-size: 1.25em;
    font-weight: bold;
    margin-bottom: 1rem;
    color: #E5E7EB;
}

/* --- Colors for Streaks & Changes --- */
.text-positive { color: #10B981; } /* [cite: 94] */
.text-negative { color: #EF4444; } /* [cite: 95] */
.text-neutral { color: #6B7280; } /* [cite: 95] */
.text-informational { color: #3B82F6; } /* Example Blue [cite: 96] */

.bg-positive-faded { background-color: rgba(16, 185, 129, 0.1); } /* [cite: 94] */
.bg-negative-faded { background-color: rgba(239, 68, 68, 0.1); } /* [cite: 95] */


/* --- Home Page Specifics --- */
.home-grid {
    display: grid;
    grid-template-columns: 2fr 1fr; /* Main content and sidebar */
    gap: 2rem;
}

.main-content-area {
    /* styles for left panel */
}
.sidebar-area {
    /* styles for right panel */
}

/* Market Snapshot & Notable Streaks Item */
.snapshot-item, .notable-streak-item {
    /* padding: 1rem; */
    /* border: 1px solid #374151; */
    /* border-radius: 6px; */
    /* margin-bottom: 1rem; */
    display: flex;
    flex-direction: column;
}

.snapshot-item h3, .notable-streak-item h3 {
    margin-top: 0;
    margin-bottom: 0.5rem;
    font-size: 1.1em;
}
.snapshot-item .ticker-symbol, .notable-streak-item .ticker-symbol {
    font-size: 0.9em;
    color: #9CA3AF;
    margin-bottom: 0.5rem;
}
.price-change { margin-bottom: 0.5rem; }

.streak-badge {
    display: inline-block;
    padding: 0.25em 0.6em;
    border-radius: 10px;
    font-size: 0.8em;
    font-weight: bold;
    color: white;
    margin-bottom: 0.75rem;
}
.streak-badge.win { background-color: #10B981; }
.streak-badge.loss { background-color: #EF4444; }
.streak-badge.neutral { background-color: #6B7280; }

.uptime-bar {
    display: flex;
    gap: 2px; /* Small gap between squares */
    height: 15px; /* Height of the bar */
    margin-bottom: 0.5rem;
}
.uptime-bar .day-square {
    flex-grow: 1; /* Each square takes equal width */
    height: 100%;
    /* border-radius: 1px; */ /* Slightly rounded squares */
}
.day-square.win { background-color: #10B981; } /* [cite: 28] */
.day-square.loss { background-color: #EF4444; } /* [cite: 28] */
.day-square.neutral { background-color: #6B7280; } /* [cite: 28] */

.aggregate-streak-performance {
    font-size: 0.9em;
    font-style: italic;
}

/* Ticker Search Bar */
.ticker-search-bar {
    margin-bottom: 1.5rem;
    display: flex;
}
.ticker-search-bar input[type="text"] {
    flex-grow: 1;
    padding: 0.75rem;
    border: 1px solid #374151;
    border-radius: 4px 0 0 4px;
    background-color: #1F2937;
    color: #D1D5DB;
    font-size: 1em;
}
.ticker-search-bar button {
    padding: 0.75rem 1rem;
    border: 1px solid #374151;
    border-left: none;
    background-color: #3B82F6; /* Blue for search button */
    color: white;
    border-radius: 0 4px 4px 0;
    cursor: pointer;
    font-size: 1em;
}
.ticker-search-bar button:hover {
    background-color: #2563EB;
}

/* --- Ticker Detail Page Specifics --- */
.ticker-detail-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
    padding-bottom: 1rem;
    border-bottom: 1px solid #374151;
}
.ticker-detail-header .app-logo { /* If you want a smaller logo here */
    font-size: 1.5em;
    font-weight: bold;
}
.ticker-info .symbol {
    font-size: 2em;
    font-weight: bold;
}
.ticker-info .price {
    font-size: 1.2em;
    margin-bottom: 0.25rem;
}
.ticker-info .last-updated {
    font-size: 0.8em;
    color: #9CA3AF;
}

.summary-cards-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
    margin-bottom: 2rem;
}
.summary-card .value {
    font-size: 1.5em;
    font-weight: bold;
    margin-bottom: 0.25rem;
}
.summary-card .sub-detail {
    font-size: 0.9em;
    color: #9CA3AF;
}

/* Price Performance Chart & Recent Streak History Table */
#pricePerformanceChart {
    /* Ensure canvas resizes correctly */
    max-width: 100%;
    /* height: auto !important; */ /* Let chart.js handle height if possible or set fixed */
}

.streak-history-table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 1rem;
}
.streak-history-table th, .streak-history-table td {
    text-align: left;
    padding: 0.75rem;
    border-bottom: 1px solid #374151;
}
.streak-history-table th {
    background-color: #374151; /* Slightly different header for table */
    color: #E5E7EB;
    font-weight: bold;
}
.streak-history-table tbody tr:nth-child(even) {
    background-color: #2c3645; /* Alternating row color [cite: 73] */
}
.streak-history-table tbody tr:hover {
    background-color: #3b4658;
}


/* --- Responsive Design --- */
@media (max-width: 768px) {
    .home-grid {
        grid-template-columns: 1fr; /* Stack main content and sidebar */
    }

    .main-nav ul {
        display: none; /* Hide nav links by default */
        flex-direction: column;
        position: absolute;
        top: 70px; /* Adjust based on header height */
        left: 0;
        width: 100%;
        background-color: #1F2937;
        z-index: 1000;
    }
    .main-nav ul.active {
        display: flex; /* Show when hamburger is clicked */
    }
    .main-nav li {
        margin: 0;
        width: 100%;
        text-align: center;
    }
    .main-nav a {
        display: block;
        padding: 1rem;
        border-bottom: 1px solid #374151;
    }
    .hamburger-menu {
        display: block;
    }

    .summary-cards-grid {
        grid-template-columns: 1fr; /* Single column for summary cards */
    }
    .ticker-detail-header {
        flex-direction: column;
        align-items: flex-start;
    }
    .ticker-detail-header .app-logo { margin-bottom: 1rem; }
}

"""),
    (["static", "js"], None),
    (["static", "js", "main.js"], """// static/js/main.js
document.addEventListener('DOMContentLoaded', function () {
    // Hamburger menu toggle
    const hamburger = document.querySelector('.hamburger-menu');
    const navUl = document.querySelector('.main-nav ul');

    if (hamburger && navUl) {
        hamburger.addEventListener('click', () => {
            navUl.classList.toggle('active');
        });
    }

    // Ticker Search Form (Client-side redirect)
    const searchForm = document.getElementById('tickerSearchForm');
    if (searchForm) {
        searchForm.addEventListener('submit', function(event) {
            event.preventDefault(); // Prevent default form submission
            const tickerInput = document.getElementById('tickerSearchInput');
            const symbol = tickerInput.value.trim().toUpperCase();
            if (symbol) {
                window.location.href = `/ticker/${symbol}`;
            }
        });
    }


    // Chart.js - Price Performance Chart
    const chartCanvas = document.getElementById('pricePerformanceChart');
    if (chartCanvas && typeof tickerChartData !== 'undefined' && tickerChartData.labels && tickerChartData.prices) {
        // tickerChartData should be provided by the template, containing labels (dates) and prices
        // Example: <script> const tickerChartData = {{ ticker.priceHistory30DayJS | safe }}; </script>

        const data = {
            labels: tickerChartData.labels, // e.g., ["May 01", "May 02", ...]
            datasets: [{
                label: 'Price',
                backgroundColor: function(context) { // Gradient fill [cite: 64]
                    const chart = context.chart;
                    const {ctx, chartArea} = chart;
                    if (!chartArea) { return null; } // Graceful exit if chartArea is not defined
                    const gradient = ctx.createLinearGradient(0, chartArea.bottom, 0, chartArea.top);
                    gradient.addColorStop(0, 'rgba(22, 163, 74, 0.05)'); // [cite: 64]
                    gradient.addColorStop(1, 'rgba(22, 163, 74, 0.6)'); // [cite: 64]
                    return gradient;
                },
                borderColor: '#10B981', // Line color: Accent green [cite: 63] (using #10B981 from theme)
                borderWidth: 2,
                data: tickerChartData.prices, // e.g., [100.50, 101.20, ...]
                fill: true, // For area chart
                pointRadius: 3, // Small circular points [cite: 65]
                pointBackgroundColor: '#10B981',
                pointBorderColor: '#ffffff',
                pointHoverRadius: 5,
                tension: 0.1 // For slight curve in line
            }]
        };

        const config = {
            type: 'line',
            data: data,
            options: {
                responsive: true, // [cite: 68]
                maintainAspectRatio: false, // Allows better control with CSS for height
                scales: {
                    y: {
                        beginAtZero: false,
                        ticks: {
                            callback: function(value, index, values) {
                                return '$' + value.toFixed(2); // Currency format [cite: 65]
                            },
                            color: '#D1D5DB' // Light Gray for Y-axis text
                        },
                        grid: {
                            color: '#374151' // Subtle dark grid lines [cite: 66]
                        }
                    },
                    x: {
                        ticks: {
                            color: '#D1D5DB' // Light Gray for X-axis text
                            // autoSkip: true,
                            // maxTicksLimit: 10 // Adjust for readability
                        },
                        grid: {
                            display: false // Grid lines hidden or very subtle for X-axis [cite: 66]
                        }
                    }
                },
                plugins: {
                    legend: {
                        display: false // Hide legend if only one dataset
                    },
                    tooltip: { // Tooltip on hover [cite: 67]
                        enabled: true,
                        mode: 'index',
                        intersect: false,
                        callbacks: {
                            // Customize tooltip content if needed
                            // title: function(tooltipItems) { return tooltipItems[0].label; },
                            // label: function(tooltipItem) {
                            //    let label = tooltipItem.dataset.label || '';
                            //    if (label) { label += ': '; }
                            //    if (tooltipItem.parsed.y !== null) {
                            //        label += '$' + tooltipItem.parsed.y.toFixed(2);
                            //    }
                            //    // Add daily change here if data is available
                            //    return label;
                            // }
                        }
                    }
                },
                interaction: {
                    mode: 'index',
                    intersect: false,
                }
            }
        };

        new Chart(chartCanvas, config);
    } else if (chartCanvas) {
        console.warn("Chart canvas found, but tickerChartData is not defined or incomplete.");
    }
});
"""),
    (["static", "images"], None),
    (["static", "images", "placeholder_ad.png"], "# This would be a placeholder image file. For scripting, creating an actual image is complex. Leaving as a note."),

    # Templates
    (["templates"], None),
    (["templates", "layout.html"], """<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}StockStreaks{% endblock %}</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css"> <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
    {% block head_extra %}{% endblock %}
</head>
<body>
    <header class="global-header">
        <div class="logo">
            <a href="{{ url_for('home') }}">Stock<span class="streaks-accent">Streaks</span></a> </div>
        <nav class="main-nav">
            <ul>
                <li><a href="{{ url_for('home') }}" class="{{ 'active' if request.endpoint == 'home' else '' }}">Home</a></li> <li><a href="{{ url_for('discover') }}" class="{{ 'active' if request.endpoint == 'discover' else '' }}">Discover Streaks</a></li> <li><a href="{{ url_for('learn') }}" class="{{ 'active' if request.endpoint == 'learn' else '' }}">Learn</a></li> </ul>
        </nav>
        <div class="hamburger-menu">
            <i class="fas fa-bars"></i>
        </div>
    </header>

    <main class="container">
        {% block content %}{% endblock %}
    </main>

    <footer class="global-footer"> <p>&copy; {{ current_year }} StockStreaks.</p> <p>For informational purposes only. Not financial advice.</p> </footer>

    <script src="{{ url_for('static', filename='js/main.js') }}"></script>
    {% block scripts_extra %}{% endblock %}
</body>
</html>
"""),
    (["templates", "home.html"], """{% extends "layout.html" %}
{% block title %}Home - StockStreaks{% endblock %}

{% block content %}
<div class="ticker-search-bar card"> <form id="tickerSearchForm" action="#" method="get"> <input type="text" id="tickerSearchInput" placeholder="Search for a stock ticker (e.g., AAPL, TSLA)"> <button type="submit"><i class="fas fa-search"></i></button> </form>
</div>

<div class="home-grid">
    <div class="main-content-area">
        <section class="market-snapshot-section card"> <h2 class="card-title">Market Snapshot</h2>
            {% if market_indices %}
                {% for index in market_indices %}
                <div class="snapshot-item card {% if index.streakType == 'Win' %}bg-positive-faded{% elif index.streakType == 'Loss' %}bg-negative-faded{% endif %}"> <a href="{{ url_for('ticker_detail', symbol=index.symbol) }}" style="text-decoration: none; color: inherit;"> <h3>{{ index.name }} <span class="ticker-symbol">({{ index.symbol }})</span></h3> <p class="price-change {% if index.dailyChangePercent.startswith('+') %}text-positive{% elif index.dailyChangePercent.startswith('-') %}text-negative{% else %}text-neutral{% endif %}">
                            {{ index.currentPrice }} ({{ index.dailyChange }}, {{ index.dailyChangePercent }}) </p>
                        <span class="streak-badge {% if index.streakType == 'Win' %}win{% elif index.streakType == 'Loss' %}loss{% else %}neutral{% endif %}">
                            {{ index.streakType }} {{ index.streakDuration }}D </span>
                        <div class="uptime-bar"> {% for day_status in index.recentDays %} {# Assumes recentDays is oldest to newest, display L to R [cite: 27] #}
                            <div class="day-square {{ day_status.lower() }}"></div> {% endfor %}
                        </div>
                    </a>
                </div>
                {% endfor %}
            {% else %}
                <p>Market snapshot data is currently unavailable.</p>
            {% endif %}
        </section>

        <section class="notable-market-streaks-section card"> <h2 class="card-title">Notable Market Streaks</h2>
            <div class="scrollable-list" style="max-height: 40rem; overflow-y: auto;"> {% if notable_streaks %}
                {% for stock in notable_streaks %}
                <div class="notable-streak-item card {% if stock.streakType == 'Win' %}bg-positive-faded{% elif stock.streakType == 'Loss' %}bg-negative-faded{% endif %}"> <a href="{{ url_for('ticker_detail', symbol=stock.symbol) }}" style="text-decoration: none; color: inherit;"> <h3>
                            {{ stock.symbol }} {% if stock.specialIndicators %}
                                {% for indicator in stock.specialIndicators %}
                                <span class="special-indicator-badge">{{ indicator }}</span> {% endfor %}
                            {% endif %}
                        </h3>
                        <p class="company-name" style="font-size:0.9em; color: #9CA3AF;">{{ stock.companyName }}</p> <p class="price-change {% if stock.dailyChangePercent.startswith('+') %}text-positive{% elif stock.dailyChangePercent.startswith('-') %}text-negative{% else %}text-neutral{% endif %}">
                            {{ stock.currentPrice }} ({{ stock.dailyChange }}, {{ stock.dailyChangePercent }}) </p>
                        <span class="streak-badge {% if stock.streakType == 'Win' %}win{% elif stock.streakType == 'Loss' %}loss{% else %}neutral{% endif %}">
                            {{ stock.streakType }} {{ stock.streakDuration }}D </span>
                        <div class="uptime-bar"> {% for day_status in stock.recentDays %} {# Assumes recentDays is oldest to newest, display L to R #}
                            <div class="day-square {{ day_status.lower() }}"></div>
                            {% endfor %}
                        </div>
                        <p class="aggregate-streak-performance {% if stock.streakType == 'Win' %}text-positive{% elif stock.streakType == 'Loss' %}text-negative{% endif %}">
                            {{ stock.streakPercentageChange }} in current streak </p>
                    </a>
                </div>
                {% endfor %}
            {% else %}
                <p>Notable streaks data is currently unavailable.</p>
            {% endif %}
            </div>
        </section>
    </div>

    <aside class="sidebar-area">
        <section class="sponsored-platforms-section card"> <h2 class="card-title">Sponsored Platforms</h2> <div class="ad-placeholder" style="border: 1px dashed #6B7280; padding: 20px; text-align: center; margin-bottom:1rem;">Ad Space 1</div> <div class="ad-placeholder" style="border: 1px dashed #6B7280; padding: 20px; text-align: center;">Ad Space 2</div> </section>

        <section class="learn-more-section card"> <h2 class="card-title">Learn More</h2>
            <a href="{{ url_for('learn') }}" class="learn-more-link" style="display:block; padding:10px; background-color:#3B82F6; color:white; text-decoration:none; border-radius:4px; text-align:center;"> <i class="fas fa-lightbulb"></i> Understanding Streaks <p style="font-size:0.8em; margin-top:5px;">Our guide to trading with streaks.</p> </a>
        </section>
    </aside>
</div>
{% endblock %}

{% block scripts_extra %}
<script>
    // Pass current year to layout for footer (if not already available globally in Flask context)
    // This can also be done via app.context_processor in app.py
    // For simplicity here, if layout.html's {{ current_year }} isn't working,
    // you might need to pass it from Flask to each template or use a context processor.
    // Flask context processor example for current_year:
    // @app.context_processor
    // def inject_current_year():
    //     from datetime import datetime
    //     return {'current_year': datetime.utcnow().year}
</script>
{% endblock %}
"""),
    (["templates", "ticker_detail.html"], """{% extends "layout.html" %}
{% block title %}{{ symbol }} - Ticker Details - StockStreaks{% endblock %}

{% block head_extra %}
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
{% endblock %}

{% block content %}
<div class="ticker-detail-page"> <section class="ticker-detail-header card"> <div class="app-logo">
             <a href="{{ url_for('home') }}">Stock<span class="streaks-accent">Streaks</span></a> </div>
        <div class="ticker-info" style="text-align:right;"> <h1 class="symbol">{{ symbol }}</h1> {% if ticker %}
            <p class="price {% if ticker.dailyChangePercent.startswith('+') %}text-positive{% elif ticker.dailyChangePercent.startswith('-') %}text-negative{% else %}text-neutral{% endif %}">
                {{ ticker.currentPrice }} ({{ ticker.dailyChange }}, {{ ticker.dailyChangePercent }}) </p>
            <p class="last-updated">Last Updated: {{ ticker.lastUpdated }}</p> {% else %}
            <p>Ticker data not available.</p>
            {% endif %}
        </div>
    </section>

    {% if ticker %}
    <section class="summary-cards-section"> <div class="summary-cards-grid">
            <div class="summary-card card {% if ticker.currentStreak.type == 'Win' %}bg-positive-faded{% elif ticker.currentStreak.type == 'Loss' %}bg-negative-faded{% endif %}">
                <h3 class="card-title">Current Streak</h3> <p class="value {% if ticker.currentStreak.type == 'Win' %}text-positive{% elif ticker.currentStreak.type == 'Loss' %}text-negative{% endif %}">{{ ticker.currentStreak.type }} {{ ticker.currentStreak.duration }} Days</p> <p class="sub-detail">Total: {{ ticker.currentStreak.priceChange }} ({{ ticker.currentStreak.percentChange }})</p> </div>
            <div class="summary-card card">
                <h3 class="card-title">Longest Winning Streak</h3> <p class="value text-positive">{{ ticker.longestWinStreak.duration }} Days</p> <p class="sub-detail">{{ ticker.longestWinStreak.dateRange }}</p> </div>
            <div class="summary-card card">
                <h3 class="card-title">Longest Losing Streak</h3> <p class="value text-negative">{{ ticker.longestLossStreak.duration }} Days</p> <p class="sub-detail">{{ ticker.longestLossStreak.dateRange }}</p>
            </div>
            <div class="summary-card card">
                <h3 class="card-title">30-Day Volatility</h3> <p class="value text-informational">{{ ticker.volatility30Day }}</p> <p class="sub-detail">Std. Dev of Daily Returns</p> </div>
        </div>
    </section>

    <section class="price-performance-chart-section card"> <h2 class="card-title">Price Performance (Last 30 Days)</h2> <div style="height: 300px; width: 100%;"> <canvas id="pricePerformanceChart"></canvas> </div>
    </section>

    <section class="recent-streak-history-table-section card"> <h2 class="card-title">Recent Streak History</h2>
        <div style="overflow-x: auto;"> <table class="streak-history-table"> <thead>
                    <tr>
                        <th>Type</th> <th>Duration</th> <th>Start Date</th> <th>End Date</th> <th>Total Change</th> </tr>
                </thead>
                <tbody>
                    {% for streak in ticker.recentStreaks %} <tr>
                        <td class="{% if streak.type == 'Win' %}text-positive{% elif streak.type == 'Loss' %}text-negative{% endif %}">{{ streak.type }}</td>
                        <td>{{ streak.duration }}</td>
                        <td>{{ streak.startDate }}</td>
                        <td>{{ streak.endDate }}</td>
                        <td class="{% if streak.totalChange.startswith('+') %}text-positive{% elif streak.totalChange.startswith('-') %}text-negative{% endif %}">{{ streak.totalChange }}</td> </tr>
                    {% else %}
                    <tr>
                        <td colspan="5" style="text-align:center;">No recent streak history available.</td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
    </section>
    {% else %}
    <p>Detailed data for {{ symbol }} could not be loaded.</p>
    {% endif %}
</div>
{% endblock %}

{% block scripts_extra %}
{% if ticker and ticker.priceHistory30Day %}
<script>
    // Prepare data for Chart.js
    // Assumes ticker.priceHistory30Day is a list of objects like {date: "YYYY-MM-DD", close: 123.45}
    // And these are sorted oldest to newest.
    const rawPriceHistory = {{ ticker.priceHistory30Day | tojson | safe }};
    const tickerChartData = {
        labels: rawPriceHistory.map(item => {
            // Format date like "May 01" from "YYYY-MM-DD"
            const date = new Date(item.date + 'T00:00:00'); // Ensure UTC or consistent timezone interpretation
            return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
        }),
        prices: rawPriceHistory.map(item => item.close)
    };
</script>
{% endif %}
<script>
    // Add current year to context for footer in layout.html if not done globally
    // This is a fallback, prefer context_processor in app.py
    // document.addEventListener('DOMContentLoaded', function() {
    // const yearSpan = document.querySelector('.global-footer p:first-child');
    // if (yearSpan && yearSpan.textContent.includes('[Current Year]')) {
    //    yearSpan.textContent = yearSpan.textContent.replace('[Current Year]', new Date().getFullYear());
    // }
    // });
</script>
{% endblock %}
"""),
    (["templates", "not_found.html"], """{% extends "layout.html" %}
{% block title %}Ticker Not Found - StockStreaks{% endblock %}

{% block content %}
<div class="not-found-page card" style="text-align: center; padding: 40px;">
    <h1>Ticker Not Found</h1>
    <p>Sorry, we could not find any data for the ticker symbol: <strong>{{ symbol }}</strong>.</p> <p>Please check the symbol and try again, or <a href="{{ url_for('home') }}">return to the homepage</a>.</p>
</div>
{% endblock %}
"""),
    (["templates", "learn.html"], """{% extends "layout.html" %}
{% block title %}Learn About Streaks - StockStreaks{% endblock %}

{% block content %}
<div class="learn-page card">
    <h1>Understanding Stock Streaks</h1>
    <p>This page will provide educational content about stock streaks, how to interpret them, and their potential role in market analysis. (Content TBD)</p>
    
    <h2>What is a Winning Streak?</h2>
    <p>A winning streak occurs when a stock's closing price increases for multiple consecutive days. [cite: 77] For example, if a stock closes higher on Monday, Tuesday, and Wednesday compared to each previous day, it's on a 3-day winning streak.</p>

    <h2>What is a Losing Streak?</h2>
    <p>Conversely, a losing streak happens when a stock's closing price decreases for multiple consecutive days. [cite: 78]</p>

    <h2>Neutral Days</h2>
    <p>A neutral day occurs if the closing price is exactly the same as the previous day's closing price. [cite: 79] These typically break a streak or are ignored in simple streak counts, depending on the definition.</p>

    <h2>Why Pay Attention to Streaks?</h2>
    <ul>
        <li><strong>Momentum Indication:</strong> Streaks can sometimes indicate market momentum or investor sentiment towards a particular stock or index.</li>
        <li><strong>Pattern Recognition:</strong> Some traders look for patterns in streaks or the end of streaks as potential signals.</li>
        <li><strong>Behavioral Finance:</strong> Streaks can sometimes be influenced by behavioral factors in the market.</li>
    </ul>

    <h2>Important Considerations</h2>
    <p><strong>Past performance is not indicative of future results.</strong> Stock streaks are historical observations and do not guarantee future price movements. Always use streak data as one of many tools in your investment analysis and consider your own risk tolerance.</p>
    <p><em>This information is for educational purposes only and is not financial advice.</em></p> <p><a href="{{ url_for('home') }}">Back to Home</a></p>
</div>
{% endblock %}
"""),
    (["templates", "discover_streaks.html"], """{% extends "layout.html" %}
{% block title %}Discover Streaks - StockStreaks{% endblock %}

{% block content %}
<div class="discover-page card">
    <h1>Discover Streaks (Placeholder)</h1>
    <p>This page is a placeholder for future functionality, such as more extensive lists of notable streaks or a potential stock screener based on streak criteria. [cite: 11, 99]</p>
    
    <p>For now, please check the "Notable Market Streaks" section on the <a href="{{ url_for('home') }}">Homepage</a>.</p>
    
    <h2>Future Ideas:</h2>
    <ul>
        <li>Filter stocks by current streak length (winning or losing).</li>
        <li>Identify stocks ending long streaks.</li>
        <li>Find stocks starting new streaks after a period of consolidation.</li>
        <li>Historical analysis of streak performance for specific tickers.</li>
    </ul>
     <p><em>This information is for educational purposes only and is not financial advice.</em></p> </div>
{% endblock %}
"""),

]

def create_scaffold(base_path, structure_plan):
    """Creates the directory and file structure."""
    print(f"Creating project scaffold at: {base_path}")
    if not os.path.exists(base_path):
        os.makedirs(base_path)
        print(f"Created base directory: {base_path}")
    else:
        print(f"Base directory {base_path} already exists.")

    for path_parts, content in structure_plan:
        current_path = os.path.join(base_path, *path_parts)

        if content is None: # It's a directory
            if not os.path.exists(current_path):
                os.makedirs(current_path)
                print(f"  Created directory: {current_path}")
            else:
                print(f"  Directory exists: {current_path}")
        else: # It's a file
            # Ensure parent directory exists
            parent_dir = os.path.dirname(current_path)
            if not os.path.exists(parent_dir):
                os.makedirs(parent_dir)
                print(f"  Created parent directory for file: {parent_dir}")

            with open(current_path, 'w', encoding='utf-8') as f:
                if isinstance(content, list):
                    f.write("\\n".join(content))
                else:
                    f.write(content)
            print(f"  Created file:      {current_path}")

if __name__ == "__main__":
    # Get the directory where this script is located
    script_dir = os.path.dirname(os.path.abspath(__file__))
    project_root = os.path.join(script_dir, PROJECT_NAME)

    create_scaffold(project_root, structure)
    print("\\nScaffolding complete.")
    print(f"Project '{PROJECT_NAME}' created in: {script_dir}")
    print("Next steps:")
    print(f"1. cd {PROJECT_NAME}")
    print("2. Create and activate a virtual environment (e.g., python -m venv venv && source venv/bin/activate).")
    print("3. Install dependencies: pip install -r requirements.txt")
    print("4. Review and populate the placeholder files, especially within the 'pipeline' directory.")
    print("5. Set up API keys/secrets for your data sources (e.g., using environment variables or Fly.io secrets).")
    print("6. Test the pipeline: python pipeline/run_pipeline.py")
    print("7. Test the Flask app: flask run (or python app.py)")